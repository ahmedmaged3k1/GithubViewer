package com.example.githubviewer.data.remote.dto

import androidx.room.Entity
import androidx.room.PrimaryKey
import com.example.githubviewer.domain.model.License
import com.example.githubviewer.domain.model.Owner


data class RepoDetailsResponse(
    var allow_forking: Boolean,
    val archive_url: String,
    var archived: Boolean,
    val assignees_url: String,
    val blobs_url: String,
    val branches_url: String,
    val clone_url: String,
    val collaborators_url: String,
    val comments_url: String,
    val commits_url: String,
    val compare_url: String,
    val contents_url: String,
    val contributors_url: String,
    val created_at: String,
    val default_branch: String,
    val deployments_url: String,
    val description: String,
    var disabled: Boolean,
    val downloads_url: String,
    val events_url: String,
    var fork: Boolean,
    val forks: Int,
    val forks_count: Int,
    val forks_url: String,
    val full_name: String,
    val git_commits_url: String,
    val git_refs_url: String,
    val git_tags_url: String,
    val git_url: String,
    var has_discussions: Boolean,
    var has_downloads: Boolean,
    var has_issues: Boolean,
    var has_pages: Boolean,
    var has_projects: Boolean,
    var has_wiki: Boolean,
    val homepage: String,
    val hooks_url: String,
    val html_url: String,
    val id: Int,
    var is_template: Boolean,
    val issue_comment_url: String,
    val issue_events_url: String,
    val issues_url: String,
    val keys_url: String,
    val labels_url: String,
    val language: String,
    val languages_url: String,
    val license: License,
    val merges_url: String,
    val milestones_url: String,
    val mirror_url: Any?,
    val name: String,
    val network_count: Int,
    val node_id: String,
    val notifications_url: String,
    val open_issues: Int,
    val open_issues_count: Int,
    val owner: Owner,
    var private: Boolean,
    val pulls_url: String,
    val pushed_at: String,
    val releases_url: String,
    val size: Int,
    val ssh_url: String,
    val stargazers_count: Int,
    val stargazers_url: String,
    val statuses_url: String,
    val subscribers_count: Int,
    val subscribers_url: String,
    val subscription_url: String,
    val svn_url: String,
    val tags_url: String,
    val teams_url: String,
    val temp_clone_token: Any?,
    val topics: List<Any>,
    val trees_url: String,
    val updated_at: String,
    @PrimaryKey val url: String = "",
    val visibility: String,
    val watchers: Int,
    val watchers_count: Int,
    var web_commit_signoff_required: Boolean
)
/*
   constructor() : this(
        false, "", false, "", "", "", "", "", "", "",
        "", "", "", "", "", "", "", "", false, "", "",
        false, 0, 0, "", "", "", "", "", "", "",
        false, false, false, false, false, false, "", "",
        "", 0, false, "", "", "", "", "", "", "",
        "", "", License("","","","",""), "", "", null, "", 0, "",
        "", 0, 0, Owner("","","","","","","",0,"","","","","",true,"","","",""), false, "", "", "", 0, "", 0,
        "", "", 0, "", "", "", "", "", "", null, listOf(),
        "", "", "", "", 0, 0, false
    )
 */